import React from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import { Calendar, MapPin } from "lucide-react";
import { format, parseISO } from "date-fns";
import { de } from "date-fns/locale";

const priorityColors = {
  niedrig: "bg-slate-100 text-slate-800 border-slate-200",
  mittel: "bg-blue-100 text-blue-800 border-blue-200",
  hoch: "bg-orange-100 text-orange-800 border-orange-200",
  dringend: "bg-red-100 text-red-800 border-red-200"
};

const statusColors = {
  offen: "bg-yellow-100 text-yellow-800 border-yellow-200",
  in_bearbeitung: "bg-blue-100 text-blue-800 border-blue-200",
  abgeschlossen: "bg-green-100 text-green-800 border-green-200"
};

export default function OrderAssignmentDialog({ 
  open, 
  onOpenChange, 
  technician,
  orders,
  onToggleAssignment
}) {
  if (!technician) return null;

  const isAssigned = (order) => {
    return order.assigned_technicians?.includes(technician.id);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[80vh]">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold">
            Aufträge für {technician.name}
          </DialogTitle>
          <p className="text-sm text-slate-600">
            Wählen Sie die Aufträge, die diesem Techniker zugewiesen werden sollen
          </p>
        </DialogHeader>

        <div className="space-y-3 overflow-y-auto max-h-[500px] pr-2">
          {orders.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-slate-500">Keine Aufträge verfügbar</p>
            </div>
          ) : (
            orders.map((order) => (
              <div
                key={order.id}
                className="flex items-start gap-3 p-4 rounded-lg border border-slate-200 hover:bg-slate-50 transition-colors"
              >
                <Checkbox
                  id={`order-${order.id}`}
                  checked={isAssigned(order)}
                  onCheckedChange={() => onToggleAssignment(order)}
                  className="mt-1"
                />
                <label
                  htmlFor={`order-${order.id}`}
                  className="flex-1 cursor-pointer"
                >
                  <div className="space-y-2">
                    <div className="flex items-start justify-between gap-3">
                      <div>
                        <h4 className="font-semibold text-slate-900">
                          {order.title}
                        </h4>
                        {order.description && (
                          <p className="text-sm text-slate-600 mt-1">
                            {order.description}
                          </p>
                        )}
                      </div>
                      <div className="flex flex-col gap-1">
                        <Badge className={`${priorityColors[order.priority]} border text-xs`}>
                          {order.priority}
                        </Badge>
                        <Badge className={`${statusColors[order.status]} border text-xs`}>
                          {order.status.replace(/_/g, ' ')}
                        </Badge>
                      </div>
                    </div>
                    <div className="flex flex-wrap gap-3 text-xs text-slate-600">
                      <div className="flex items-center gap-1">
                        <MapPin className="w-3 h-3" />
                        {order.location}
                      </div>
                      <div className="flex items-center gap-1">
                        <Calendar className="w-3 h-3" />
                        {format(parseISO(order.start_date), "dd.MM.yyyy", { locale: de })}
                        {" - "}
                        {format(parseISO(order.end_date), "dd.MM.yyyy", { locale: de })}
                      </div>
                    </div>
                  </div>
                </label>
              </div>
            ))
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}