import React from "react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { 
  Mail, 
  Phone, 
  Edit, 
  Trash2,
  Briefcase,
  Calendar,
  ListChecks
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { format, parseISO, isWithinInterval } from "date-fns";
import { de } from "date-fns/locale";

const formatDate = (dateString, formatString) => {
  if (!dateString) return null;
  try {
    return format(parseISO(dateString), formatString, { locale: de });
  } catch (e) {
    return null;
  }
};

export default function TechnicianList({ 
  technicians, 
  orders,
  isLoading, 
  onEdit, 
  onDelete,
  onManageOrders,
  getTechnicianOrders
}) {
  if (isLoading) {
    return (
      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {[1, 2, 3].map((i) => (
          <Card key={i} className="p-6">
            <Skeleton className="h-48 w-full" />
          </Card>
        ))}
      </div>
    );
  }

  const isAvailable = (technicianId) => {
    const today = new Date();
    const activeOrders = orders.filter(o => {
      if (!o.assigned_technicians?.includes(technicianId) || o.status === 'abgeschlossen') {
        return false;
      }
      
      if (!o.start_date || !o.end_date) {
        return false;
      }
      
      try {
        return isWithinInterval(today, {
          start: parseISO(o.start_date),
          end: parseISO(o.end_date)
        });
      } catch (e) {
        return false;
      }
    });
    return activeOrders.length === 0;
  };

  if (technicians.length === 0) {
    return (
      <Card className="p-12 text-center shadow-lg border-0">
        <div className="w-20 h-20 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <Briefcase className="w-10 h-10 text-slate-400" />
        </div>
        <h3 className="text-xl font-semibold text-slate-900 mb-2">
          Keine Techniker gefunden
        </h3>
        <p className="text-slate-600">
          F체gen Sie Ihren ersten Techniker hinzu
        </p>
      </Card>
    );
  }

  return (
    <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
      <AnimatePresence>
        {technicians.map((tech, index) => {
          const techOrders = getTechnicianOrders(tech.id);
          const available = isAvailable(tech.id);
          
          return (
            <motion.div
              key={tech.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ delay: index * 0.05 }}
            >
              <Card className="p-6 hover:shadow-xl transition-all duration-300 border-0 shadow-lg">
                <div className="space-y-4">
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-3">
                      <div className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg text-white ${
                        tech.status === 'active'
                          ? 'bg-gradient-to-br from-blue-500 to-blue-600'
                          : 'bg-gradient-to-br from-slate-400 to-slate-500'
                      }`}>
                        {tech.name[0].toUpperCase()}
                      </div>
                      <div>
                        <h3 className="font-bold text-lg text-slate-900">
                          {tech.name}
                        </h3>
                        {tech.specialization && (
                          <p className="text-sm text-slate-600">
                            {tech.specialization}
                          </p>
                        )}
                      </div>
                    </div>
                    <Badge className={`${
                      available 
                        ? 'bg-green-100 text-green-800 border-green-200' 
                        : 'bg-orange-100 text-orange-800 border-orange-200'
                    } border`}>
                      {available ? 'Verf체gbar' : 'Im Einsatz'}
                    </Badge>
                  </div>

                  <div className="space-y-2 text-sm">
                    {tech.email && (
                      <div className="flex items-center gap-2 text-slate-600">
                        <Mail className="w-4 h-4" />
                        <span className="truncate">{tech.email}</span>
                      </div>
                    )}
                    {tech.phone && (
                      <div className="flex items-center gap-2 text-slate-600">
                        <Phone className="w-4 h-4" />
                        <span>{tech.phone}</span>
                      </div>
                    )}
                  </div>

                  {techOrders.length > 0 && (
                    <div className="pt-3 border-t border-slate-200">
                      <p className="text-xs font-semibold text-slate-500 uppercase mb-2">
                        Zugewiesene Auftr채ge ({techOrders.length})
                      </p>
                      <div className="space-y-2">
                        {techOrders.slice(0, 2).map((order) => {
                          const startDate = formatDate(order.start_date, "dd.MM.");
                          const endDate = formatDate(order.end_date, "dd.MM.yy");
                          
                          return (
                            <div
                              key={order.id}
                              className="p-2 bg-slate-50 rounded-lg text-xs"
                            >
                              <p className="font-medium text-slate-900 mb-1">
                                {order.title}
                              </p>
                              {startDate && endDate && (
                                <div className="flex items-center gap-1 text-slate-600">
                                  <Calendar className="w-3 h-3" />
                                  <span>{startDate} - {endDate}</span>
                                </div>
                              )}
                            </div>
                          );
                        })}
                        {techOrders.length > 2 && (
                          <p className="text-xs text-slate-500">
                            +{techOrders.length - 2} weitere
                          </p>
                        )}
                      </div>
                    </div>
                  )}

                  <div className="flex gap-2 pt-3">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => onManageOrders(tech)}
                      className="flex-1 border-slate-300"
                    >
                      <ListChecks className="w-4 h-4 mr-1" />
                      Auftr채ge
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => onEdit(tech)}
                      className="border-slate-300"
                    >
                      <Edit className="w-4 h-4" />
                    </Button>
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => onDelete(tech.id)}
                      className="border-red-200 text-red-600 hover:bg-red-50"
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              </Card>
            </motion.div>
          );
        })}
      </AnimatePresence>
    </div>
  );
}