import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { format, parseISO } from "date-fns";
import { de } from "date-fns/locale";
import { MapPin, Calendar, Users } from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";

const priorityColors = {
  niedrig: "bg-slate-100 text-slate-800 border-slate-200",
  mittel: "bg-blue-100 text-blue-800 border-blue-200",
  hoch: "bg-orange-100 text-orange-800 border-orange-200",
  dringend: "bg-red-100 text-red-800 border-red-200"
};

const statusColors = {
  offen: "bg-yellow-100 text-yellow-800 border-yellow-200",
  in_bearbeitung: "bg-blue-100 text-blue-800 border-blue-200",
  abgeschlossen: "bg-green-100 text-green-800 border-green-200"
};

const formatDate = (dateString, formatString) => {
  if (!dateString) return null;
  try {
    return format(parseISO(dateString), formatString, { locale: de });
  } catch (e) {
    return null;
  }
};

export default function RecentOrders({ orders, isLoading, technicians }) {
  if (isLoading) {
    return (
      <Card className="shadow-lg border-0">
        <CardHeader>
          <Skeleton className="h-6 w-48" />
        </CardHeader>
        <CardContent className="space-y-4">
          {[1, 2, 3].map((i) => (
            <Skeleton key={i} className="h-24 w-full" />
          ))}
        </CardContent>
      </Card>
    );
  }

  const getTechnicianNames = (techIds) => {
    if (!techIds || techIds.length === 0) return "Nicht zugewiesen";
    return techIds
      .map(id => technicians.find(t => t.id === id)?.name || "Unbekannt")
      .join(", ");
  };

  return (
    <Card className="shadow-lg border-0">
      <CardHeader className="border-b border-slate-100">
        <div className="flex items-center justify-between">
          <CardTitle className="text-xl font-bold text-slate-900">
            Aktuelle Aufträge
          </CardTitle>
          <Link 
            to={createPageUrl("Orders")}
            className="text-sm text-blue-600 hover:text-blue-700 font-medium"
          >
            Alle anzeigen →
          </Link>
        </div>
      </CardHeader>
      <CardContent className="p-6">
        {orders.length === 0 ? (
          <div className="text-center py-12">
            <div className="w-16 h-16 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Calendar className="w-8 h-8 text-slate-400" />
            </div>
            <p className="text-slate-500 mb-4">Keine offenen Aufträge</p>
            <Link to={createPageUrl("Orders")}>
              <Badge className="bg-blue-600 hover:bg-blue-700 cursor-pointer">
                Ersten Auftrag erstellen
              </Badge>
            </Link>
          </div>
        ) : (
          <div className="space-y-4">
            {orders.map((order) => {
              const startDate = formatDate(order.start_date, "dd.MM.");
              const endDate = formatDate(order.end_date, "dd.MM.yy");
              const singleDate = formatDate(order.date, "dd.MM.yy");
              
              return (
                <div
                  key={order.id}
                  className="p-4 rounded-xl border border-slate-200 hover:border-blue-300 hover:shadow-md transition-all duration-200 bg-white"
                >
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex-1">
                      <h3 className="font-semibold text-slate-900 mb-1">
                        {order.title}
                      </h3>
                      <div className="flex flex-wrap gap-2 text-sm text-slate-600">
                        <div className="flex items-center gap-1">
                          <MapPin className="w-4 h-4" />
                          {order.location}
                        </div>
                        {startDate && endDate ? (
                          <div className="flex items-center gap-1">
                            <Calendar className="w-4 h-4" />
                            {startDate} - {endDate}
                          </div>
                        ) : singleDate ? (
                          <div className="flex items-center gap-1">
                            <Calendar className="w-4 h-4" />
                            {singleDate}
                          </div>
                        ) : null}
                      </div>
                    </div>
                    <div className="flex flex-col gap-2 items-end">
                      <Badge className={`${priorityColors[order.priority]} border`}>
                        {order.priority}
                      </Badge>
                      <Badge className={`${statusColors[order.status]} border`}>
                        {order.status.replace(/_/g, ' ')}
                      </Badge>
                    </div>
                  </div>
                  <div className="flex items-center gap-2 text-sm text-slate-600 pt-2 border-t border-slate-100">
                    <Users className="w-4 h-4" />
                    <span>{getTechnicianNames(order.assigned_technicians)}</span>
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </CardContent>
    </Card>
  );
}