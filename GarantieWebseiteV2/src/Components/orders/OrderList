import React from "react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { 
  MapPin, 
  Calendar, 
  Users, 
  Edit, 
  Trash2, 
  CheckCircle2,
  Clock
} from "lucide-react";
import { format, parseISO } from "date-fns";
import { de } from "date-fns/locale";
import { motion, AnimatePresence } from "framer-motion";

const priorityColors = {
  niedrig: "bg-slate-100 text-slate-800 border-slate-200",
  mittel: "bg-blue-100 text-blue-800 border-blue-200",
  hoch: "bg-orange-100 text-orange-800 border-orange-200",
  dringend: "bg-red-100 text-red-800 border-red-200"
};

const statusColors = {
  offen: "bg-yellow-100 text-yellow-800 border-yellow-200",
  in_bearbeitung: "bg-blue-100 text-blue-800 border-blue-200",
  abgeschlossen: "bg-green-100 text-green-800 border-green-200"
};

const formatDate = (dateString) => {
  if (!dateString) return null;
  try {
    return format(parseISO(dateString), "dd.MM.yyyy", { locale: de });
  } catch (e) {
    return null;
  }
};

export default function OrderList({ 
  orders, 
  technicians, 
  isLoading, 
  onEdit, 
  onDelete, 
  onComplete 
}) {
  if (isLoading) {
    return (
      <div className="space-y-4">
        {[1, 2, 3].map((i) => (
          <Card key={i} className="p-6">
            <Skeleton className="h-32 w-full" />
          </Card>
        ))}
      </div>
    );
  }

  const getTechnicianNames = (techIds) => {
    if (!techIds || techIds.length === 0) return "Nicht zugewiesen";
    return techIds
      .map(id => technicians.find(t => t.id === id)?.name || "Unbekannt")
      .join(", ");
  };

  if (orders.length === 0) {
    return (
      <Card className="p-12 text-center shadow-lg border-0">
        <div className="w-20 h-20 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <Calendar className="w-10 h-10 text-slate-400" />
        </div>
        <h3 className="text-xl font-semibold text-slate-900 mb-2">
          Keine Aufträge gefunden
        </h3>
        <p className="text-slate-600">
          Erstellen Sie Ihren ersten Auftrag oder ändern Sie die Filter
        </p>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      <AnimatePresence>
        {orders.map((order, index) => {
          const startDate = formatDate(order.start_date);
          const endDate = formatDate(order.end_date);
          const singleDate = formatDate(order.date);
          
          return (
            <motion.div
              key={order.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ delay: index * 0.05 }}
            >
              <Card className="p-6 hover:shadow-xl transition-all duration-300 border-0 shadow-lg">
                <div className="flex flex-col lg:flex-row justify-between gap-4">
                  <div className="flex-1 space-y-3">
                    <div className="flex items-start justify-between">
                      <div>
                        <div className="flex items-center gap-3 mb-2">
                          <h3 className="text-xl font-bold text-slate-900">
                            {order.title}
                          </h3>
                          <Badge variant="outline" className="text-xs">
                            {order.order_number}
                          </Badge>
                        </div>
                        {order.description && (
                          <p className="text-slate-600 mb-3">{order.description}</p>
                        )}
                      </div>
                    </div>

                    <div className="grid md:grid-cols-2 gap-3 text-sm">
                      <div className="flex items-center gap-2 text-slate-700">
                        <MapPin className="w-4 h-4 text-slate-400" />
                        <span>{order.location}</span>
                      </div>
                      {startDate && endDate ? (
                        <div className="flex items-center gap-2 text-slate-700">
                          <Calendar className="w-4 h-4 text-slate-400" />
                          <span>{startDate} - {endDate}</span>
                        </div>
                      ) : singleDate ? (
                        <div className="flex items-center gap-2 text-slate-700">
                          <Calendar className="w-4 h-4 text-slate-400" />
                          <span>{singleDate}</span>
                        </div>
                      ) : null}
                      <div className="flex items-center gap-2 text-slate-700 md:col-span-2">
                        <Users className="w-4 h-4 text-slate-400" />
                        <span>{getTechnicianNames(order.assigned_technicians)}</span>
                      </div>
                    </div>

                    {order.notes && (
                      <div className="mt-3 p-3 bg-slate-50 rounded-lg">
                        <p className="text-sm text-slate-600">{order.notes}</p>
                      </div>
                    )}
                  </div>

                  <div className="flex flex-col gap-3 lg:items-end">
                    <div className="flex flex-wrap gap-2">
                      <Badge className={`${priorityColors[order.priority]} border`}>
                        {order.priority}
                      </Badge>
                      <Badge className={`${statusColors[order.status]} border`}>
                        {order.status.replace(/_/g, ' ')}
                      </Badge>
                    </div>

                    <div className="flex gap-2">
                      {order.status !== 'abgeschlossen' && (
                        <Button
                          size="sm"
                          onClick={() => onComplete(order)}
                          className="bg-green-600 hover:bg-green-700"
                        >
                          <CheckCircle2 className="w-4 h-4 mr-1" />
                          Abschließen
                        </Button>
                      )}
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => onEdit(order)}
                        className="border-slate-300"
                      >
                        <Edit className="w-4 h-4" />
                      </Button>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => onDelete(order.id)}
                        className="border-red-200 text-red-600 hover:bg-red-50"
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </div>
              </Card>
            </motion.div>
          );
        })}
      </AnimatePresence>
    </div>
  );
}